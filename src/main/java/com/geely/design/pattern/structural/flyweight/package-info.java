package com.geely.design.pattern.structural.flyweight;
/**
 适配器模式
 一、定义
    提供了减少对象数量从而改善应用所需的对象结构的方式
    运用共享技术有效地支持大量细粒度的对象

 二、适用场景
    尝尝用于系统的底层开发，以便解决系统的性能问题，
        如JAVA中是String类型使用了享元模式，若有则返回，若没有则创建一个字符串保存在字符串缓存池里
    系统有大量相似对象、需要缓冲池的场景

 三、优点
    减少对象的创建，降低内存中对象的数量，降低系统内存，提高效率
    减少内存之外的其他资源占用

 四、缺点
    关注内部外部状态、关注线程安全问题
    使系统、程序的逻辑复杂化

 五、扩展
    内部状态：是享元模式的一个属性，在享元模式的内部，不会随着环境改变而改变的共享部分
    外部状态：不可共享状态，随着外部参数传入进来而变化

 享元模式和代理模式：若代理创建的资源比较多，可使用享元模式提高创建速度
 享元模式和单例模式：容器单例即是使用了享元模式

 */